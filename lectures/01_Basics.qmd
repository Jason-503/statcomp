---
title: "Modern Statistical Computing"
subtitle: "1. Basics"
author: "David Rossell"
institute: "Pompeu Fabra University"
execute:
  echo: true
format:
  revealjs:
    theme: [default, custom.scss]
    scrollable: true
toc: true
toc-depth: 1
number-sections: false
mouse-wheel: true
code-overflow: scroll
code-line-numbers: false
code-copy: true
cache: true
title-slide-style: pandoc
bibliography: references.bib
editor: visual
---

## Reproducing these lecture notes

Quarto markdown `01_Basics.qmd`

Required R packages

```{r, eval=FALSE}
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("rstudio-education/dsbox")
```

Once they're installed, load them.

```{r, echo=FALSE}
library(tidyverse)  #also loads ggplot2
library(dplyr)
library(dsbox)
```



# Why Statistical Computing?

## Data science and Statistics

Data science dubbed the sexiest job of the 21st century by [Harvard business review](https://hbr.org/2022/07/is-data-scientist-still-the-sexiest-job-of-the-21st-century) and is in high-demand [(see World Data Science)](https://www.worlddatascience.org/blogs/why-data-science-is-the-most-indemand-skill-now-and-how-can-you-prepare-for-it)

Statistical computing is one of its core components. We focus on R

-   Great for statistical analyses, plots, reports and *reproducibility*

-   Active community. Lots of resources, latest advances

-   Multi-platform, free, open-source

-   One of the most popular programming languages [(r4stats review)](https://r4stats.com/articles/popularity) [(Tiobe index)](https://www.tiobe.com/tiobe-index)


Note: Python more popular for Machine learning, lags a bit behind in Statistics

## Resources

Install R from [here](https://www.r-project.org/), then posit (RStudio) from [here](https://posit.co/)

Alternatively, [posit cloud](https://posit.cloud) has a free plan

**Books and tutorials**

- Jared Lander's *R for everyone* (at Aula Global)

- Hadley Wickam's [R for Data Science](https://r4ds.had.co.nz/introduction.html)

- RStudio [tutorials](https://education.rstudio.com/learn)

- RStudio [books](https://www.rstudio.com/resources/books)


## Get RStudio started

When starting a new project, I recommend `File -> New project`

- All R code, data, figures, reports stored in a single folder

- You can share the entire folder, and upload it at Github

Main file types

- Pure R code: `File -> New file -> R script`

- [Markdown](https://rmarkdown.rstudio.com): `File -> New file -> R markdown`

- [Quarto](https://quarto.org): `File -> New file -> Quarto document`

Markdown/quarto combine text and R code. Compile into html/pdf/word

- These slides were created with quarto 

- In quarto you can combine R, Python & Julia code


# First examples

## 

> "The simple graph has brought more information to the data analystâ€™s mind than any other device" - John Tukey

Let's dive in! We load dataset `starwars` included in package `dplyr`

```{r, warning=FALSE, message=FALSE}
starwars
```

<small> Note: `tibble` is an extension of `data.frame`, to be discussed </small>

## 

Scatterplots help reveal trends, and **outliers**

```{r}
par(mar = c(4, 4, 1, .1))
plot(starwars$height, starwars$mass, xlab='Height (cm)', ylab='Mass (kg)')
```

## 

Same figure, now using `ggplot` (to be discussed)

```{r fig.width = 10, warning = FALSE, echo=TRUE, out.width = "50%"}
#| code-fold: true
ggplot(data = starwars, mapping = aes(x = height, y = mass)) +
  geom_point() +
  labs(title = "Mass vs. height of Starwars characters", x="Height (cm)", y="Weight (kg)") +
  geom_point(data= starwars %>% filter(name=="Jabba Desilijic Tiure"), size=5, pch=1, color="pink", stroke=3)
```



## Histogram

Duke university student survey data (`student_survey`) from package `dsbox`

```{r}
tt= 'How old were you when you had the first kiss'
fk= student_survey$first_kiss
```

Let's first use R's basic function `hist`

::: columns
::: {.column width="50%"}

```{r histkiss}
hist(fk,xlab='Years',main=tt)
```

:::

::: {.column width="50%"}

```{r histkissprob}
hist(fk,prob=TRUE,xlab='Years',main=tt)
```

:::

:::

---

Next use `ggplot` and adjust the bin width

```{r histkissgg, warning = FALSE}
#| code-fold: true
ggplot(student_survey, aes(x = first_kiss)) +
  geom_histogram(binwidth = 1) +
  labs(title = "How old were you when you had your first kiss?", x = "Age (years)", y = NULL)
```

# R basics

---

Operating with vectors: recycling, accessing elements

```{r comment='#'}
x= 1; y= c(1,3,5)  
z= x+y      
z
length(z)
z[1]
z[c(1,2)]
z[1:2]
z[c(TRUE,TRUE,FALSE)]
z[4]= 7
z
z/2
```

---

Basic data types: <small> `numeric`, `double`, `integer`, `logical`, `character`, `factor` </small>

```{r}
class(z)
is.double(z)
is.integer(z)
zi= as.integer(z)
class(zi)
as.character(zi)
```

```{r}
sel= (z>5)
sel
sel + 1
```

```{r}
any(z>5)
all(z>5)
```

---

## Example

Boxplot: height distribution vs. skin color (human/non-human)?

```{r swboxplot}
mycols= c('fair','white','light','brown','dark')
starwars$human_skincolor= ifelse(starwars$skin_color %in% mycols, 'human', 'non-human')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
```

---

Factors are similar to characters, but are treated differently by many R functions (e.g. they can be used in regression models)

```{r error=TRUE}
x= c('Low','Low','Medium','High')
x
nchar(x)       #number of characters
grep('Lo', x)  #entries containing string
xf= factor(x)
xf
nchar(xf)
```

## Missing values

```{r, error=TRUE}
x= c(1,5,NA,10)
mean(x)
mean(x, na.rm=TRUE)
sd(x, na.rm=TRUE)

is.na(x)
```

## Pipes

A new paradigm for calling functions is the pipe `%>%`. It takes the output of an expression and inserts it as the 1st argument of the function on the right-hand side

That is, `x %>% f` is the same as `f(x)`

```{r}
x= 1:10
mean(x)
x %>% mean
```

Multiple pipes can be concatenated. Sometimes pipes save programming effort, and some people find them easier to read
(e.g. the [tidyverse](https://www.tidyverse.org) uses lots of pipes)

```{r}
sum(is.na(x))
x %>% is.na %>% sum
```

Note: the Rstudio shortcut to insert the pipe is ctrl + shift + m

## Data structures

- `list`: like a vector, but each entry can be of a different type

- `matrix`: two-dimensional vector, all entries must be numeric

- `data.frame`: rectangular dataset, each column can have a different type

- `tibble`: the tidyverse extension of `data.frame`

```{r}
m= matrix(1:9, nrow=3, ncol=3, byrow=FALSE)
m
m[1:2,1:2]
m[1:2]
m[1:2,drop=FALSE]
```

--- 

Row and colum names, and recycling (applies column-wise)

```{r}
rownames(m)= c('r1','r2','r3'); colnames(m)= c('c1','c2','c3')
m
m[c('r1','r2'),c('c1','c2')]
m + c(0,1,2)
```

```{r}
mdf= as.data.frame(m); mdf$name= c('Laura','Paul','Lyz')
mdf
names(mdf)
```

## Lists

```{r}
x= list(a=1:5, b=c('hey','you'), c=m)
x
x[1:2]  #sub-list
x[1]    #sub-list with one element
x[[1]]  #access 1st element
```

# ggplot basics

---

A core member of the tidyverse. gg means "grammar of graphics", a standard syntax to describe elements in a graph. Basic syntax:

```{r, eval=FALSE}
ggplot(data= mydata) +
  <GEOMFUNCTION>(mapping = aes(<MAPPINGS>))
```

- `ggplot` creates a new (empty) plot, based on data from `mydata`

- GEOMFUNCTION: name of a function that adds elements to the plot, e.g. `geom_point` adds a scatterplot

- `aes` describes how variables are mapped to visual properties, e.g. what goes into the x- and y-axis, colors, sizes...


## {auto-animate="true"}

```{r}
ggplot(data = starwars) +
  geom_point(mapping = aes(x = height, y = mass))
```

## {auto-animate="true"}

```{r}
ggplot(data = starwars) +
  geom_point(mapping = aes(x = height, y = mass)) +
  geom_smooth(method='lm', mapping = aes(x = height, y=mass))
```

## 

`mapping` is shared, pass it to `ggplot` and all geoms will use it (by default)

```{r}
ggplot(data = starwars, mapping = aes(x = height, y = mass)) +
  geom_point() +
  geom_smooth(method='lm')
```

## Set point color and shape

```{r}
ggplot(data = starwars, aes(x = height, y = mass)) +
  geom_point(aes(color= human_skincolor, shape= human_skincolor)) +
  geom_smooth(method='lm')
```


## Facets

Facets allow splitting the plot by one or more variables

```{r}
ggplot(data = starwars, aes(x = height, y = mass)) +
  geom_point() +
  geom_smooth(method='lm') +
  facet_wrap(~ human_skincolor)
```

## Summary

```{r, eval=FALSE}
ggplot(mydata, mapping=aes(<MAPPINGS>)) +
  <GEOMFUNC1>(aes(<MAPPINGS>)) +
  ...
  <GEOMFUNCn>(aes(<MAPPINGS>)) +
  <FACETFUNC>() +
  options
```

- Options include `xlab`, `ylab`, `theme`, `labs` to set axis styles etc.

- There are also coordinate functions (e.g. for maps), we don't need them now

Resources

- [Datacamp cheat sheet](https://res.cloudinary.com/dyd911kmh/image/upload/v1666806657/Marketing/Blog/ggplot2_cheat_sheet.pdf)

- [posit cheat sheet](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)

- [Reference with all functions](https://ggplot2.tidyverse.org/reference)


# Further ggplot examples

## Line types {auto-animate="true"}

```{r}
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
  geom_point(aes(shape=human_skincolor)) +
  geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE)
```

## Line types {auto-animate="true"}

```{r}
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
  geom_point(aes(shape=human_skincolor)) +
  geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE) +
  labs(x='Height(cm)', y='Mass (kg)', title='Starwars characters', color='Human character?', shape='Human character?', linetype='Human character?') +
  theme(legend.position = c(0.1,0.7))
```

## Non-linear trends

By default `geom_smooth` shows a non-linear regression (`method="loess"`).
Consider the `mpg` data, where

- `displ`: engine size

- `hwy`: highway miles per galon

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() +
  geom_smooth(color='black')
```


## Violin plot

::: panel-tabset
### Boxplot

```{r swboxplot2}
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
```

### Scatterplot

```{r scatter}
ggplot(starwars, aes(x=human_skincolor, y=height)) +
  geom_point()
```

### Violin plot

```{r swviolin}
ggplot(starwars, aes(x=human_skincolor, y=height)) +
  geom_point() +
  geom_violin()
```

:::


## Barplot (counts)

Count the number of diamonds with each cut quality (variable `cut`) in dataset `diamonds`

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut))
```

## Barplot (percentage)

To plot percentages we use `y=after_stat(prop)`, for some funny reason we must also set `group=1`.

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut, y=after_stat(prop), group=1))
```

## Barplot (percentage)

Finally, `scale_y_continuous` changes the 0-1 scale to %. We also set axis labels and increase their default size

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut, y=after_stat(prop), group=1)) +
  scale_y_continuous(labels = scales::percent_format()) +
  xlab("Diamond cut") + ylab("Percentage") +
  theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"))
```


## Multiple barplots

`fill` aesthetic split counts according to the specified variable (diamond clarity)

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut, fill = clarity))
```

## Multiple barplots

`position="dodge"` places bars beside each other

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut, fill = clarity), position = "dodge")
```



# Other stuff


## Speeding up loops

```{r}
n= 100; p=1000
x= matrix(n*p, nrow=n, ncol=p)
mysum= double(p)
system.time(for (i in 1:p) { mysum[i]= sum(x[,i]) })
system.time(mysum2 <- apply(x, 2, sum))
system.time(mysum3 <- colSums(x))
```


---

```{r comment='#'}
# a boring regression
fit = lm(dist ~ 1 + speed, data = cars)
coef(summary(fit))
```

```{r cars, fig.height=4, dev='svg'}
#| code-fold: show
#| code-line-numbers: "3"
par(mar = c(4, 4, 1, .1))
plot(cars, pch = 19, col = 'darkgray', las = 1)
abline(fit, lwd = 2)
```

## 

<small> Slides created with [**Quarto**](https://quarto.org) </small>

```{r}
sessionInfo()
```
