---
title: "Modern Statistical Computing"
subtitle: "2. ggplot"
author: "David Rossell"
institute: "Pompeu Fabra University"
execute:
  echo: true
format:
  revealjs:
    theme: [default, custom.scss]
    scrollable: true
toc: true
toc-depth: 1
number-sections: false
mouse-wheel: true
code-overflow: scroll
code-line-numbers: false
code-copy: true
cache: true
title-slide-style: pandoc
bibliography: references.bib
---

## Reproducing these lecture notes

Required R packages

```{r, eval=FALSE}
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("rstudio-education/dsbox")
```

Once they're installed, load them.

```{r, warning=FALSE}
library(tidyverse)  #also loads ggplot2
library(dplyr)
library(dsbox)
```

# ggplot basics

------------------------------------------------------------------------

A core member of the tidyverse. gg means "grammar of graphics", a standard syntax to describe elements in a graph. Basic syntax:

```{r, eval=FALSE}
ggplot(data= mydata) +
  <GEOMFUNCTION>(mapping = aes(<MAPPINGS>))
```

-   `ggplot` creates a new (empty) plot, based on data from `mydata`

-   GEOMFUNCTION: name of a function that adds elements to the plot, e.g. `geom_point` adds a scatterplot

-   `aes` describes how variables are mapped to visual properties, e.g. what goes into the x- and y-axis, colors, sizes...

##  {auto-animate="true"}

```{r}
ggplot(data = starwars) +
  geom_point(mapping = aes(x = height, y = mass))
```

##  {auto-animate="true"}

```{r}
ggplot(data = starwars) +
  geom_point(mapping = aes(x = height, y = mass)) +
  geom_smooth(method='lm', mapping = aes(x = height, y=mass))
```

## 

`mapping` is shared, pass it to `ggplot` and all geoms will use it (by default)

```{r}
ggplot(data = starwars, mapping = aes(x = height, y = mass)) +
  geom_point() +
  geom_smooth(method='lm')
```

## Set point color and shape

Set point color and shape according to `human_skincolor`

```{r}
mycols= c('fair','white','light','brown','dark')
starwars$human_skincolor= ifelse(starwars$skin_color %in% mycols, 'human', 'non-human')

ggplot(data = starwars, aes(x = height, y = mass)) +
  geom_point(aes(color= human_skincolor, shape= human_skincolor)) +
  geom_smooth(method='lm')
```

## Facets

Facets allow splitting the plot by one or more variables

```{r}
ggplot(data = starwars, aes(x = height, y = mass)) +
  geom_point() +
  geom_smooth(method='lm') +
  facet_wrap(~ human_skincolor)
```

## Summary

```{r, eval=FALSE}
ggplot(mydata, mapping=aes(<MAPPINGS>)) +
  <GEOMFUNC1>(aes(<MAPPINGS>)) +
  ...
  <GEOMFUNCn>(aes(<MAPPINGS>)) +
  <FACETFUNC>() +
  options
```

-   Options include `labs` and `theme` to set titles, labels, axis styles...

-   There are also coordinate functions (e.g. for maps), we don't need them now

Resources

-   Cheat sheets: [Datacamp](https://res.cloudinary.com/dyd911kmh/image/upload/v1666806657/Marketing/Blog/ggplot2_cheat_sheet.pdf), [posit](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)

-   [Reference with all functions](https://ggplot2.tidyverse.org/reference)

---

Common geoms

- `geom_line`: lines plot
- `geom_point`: scatter-plot
- `geom_bar`, `geom_col`: barplots
- `geom_smooth`: regression between 2 variables
- `geom_histogram`, `geom_density`, `geom_violin`, `geom_boxplot`: visualize univariate distribution
- `geom_bin2d`, `geom_hex`: visualize bivariate distribution

Facets: `facet_grid`, `facet_wrap`


# Customizing the plots

---

## Line types

```{r}
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
  geom_point(aes(shape=human_skincolor)) +
  geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE)
```

## Customizing labels and legends

`labs` sets title and labels of axis and aesthetics (e.g. `color`, `shape`, `linetype`)

We need to set all aesthetic labels, else a separate legend is created for each

```{r}
mylab= 'Human character?'
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
  geom_point(aes(shape=human_skincolor)) +
  geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE) +
  labs(x='Height(cm)', y='Mass (kg)', title='Starwars characters', color=mylab, shape=mylab, linetype=mylab) +
  theme(legend.position = c(0.1,0.7))
```

## Customizing labels and legends

```{r}
mylab= 'Human character?'
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
  geom_point(aes(shape=human_skincolor)) +
  geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE) +
  labs(x='Height(cm)', y='Mass (kg)', title='Starwars characters', color=mylab, shape=mylab, linetype=mylab) +
  theme(legend.position = c(0.1,0.7)) +
  coord_cartesian(ylim = c(0, 200))
```

## Non-linear trends

By default `geom_smooth` shows a non-linear regression (`method="loess"`). Consider the `mpg` data, where

-   `displ`: engine size

-   `hwy`: highway miles per galon

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() +
  geom_smooth(color='black')
```

# Beyond scatter plots

## Violin plot

::: panel-tabset
### Boxplot

```{r swboxplot2}
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
```

### Scatterplot

```{r scatter}
ggplot(starwars, aes(x=human_skincolor, y=height)) +
  geom_point()
```

### Violin plot

```{r swviolin}
ggplot(starwars, aes(x=human_skincolor, y=height)) +
  geom_point() +
  geom_violin()
```
:::

## Histograms

::: panel-tabset

### Histogram
```{r}
ggplot(starwars, aes(x=height, fill=human_skincolor)) +
  geom_histogram(alpha=0.2, color='black')  
```

### Density plot
```{r}
ggplot(starwars, aes(x=height, color=human_skincolor)) +
  geom_density()  
```

:::

## Bivariate histograms

Dataset `diamonds`: price vs. carat

::: panel-tabset

### scatterplot

```{r}
ggplot(diamonds, aes(x=carat, y=price)) +
  geom_point() +
  scale_x_log10() + scale_y_log10()
```

### 2d histogram

```{r}
ggplot(diamonds, aes(x=carat, y=price)) +
  geom_bin2d() +
  scale_x_log10() + scale_y_log10()
```

:::


## Barplot (counts)

Count the number of diamonds with each cut quality (variable `cut`)

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut))
```

## Barplot (percentage)

To plot percentages we use `y=after_stat(prop)`, for some funny reason we must also set `group=1`.

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut, y=after_stat(prop), group=1))
```

## Barplot (percentage)

Finally, `scale_y_continuous` changes the 0-1 scale to %. We also set axis labels and increase their default size

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut, y=after_stat(prop), group=1)) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(x='Diamond cut', y='Percentage') +
  theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"))
```

## Multiple barplots

`fill` aesthetic split counts according to the specified variable (diamond clarity)

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut, fill = clarity))
```

## Multiple barplots

`position="dodge"` places bars beside each other

```{r}
ggplot(diamonds) + 
  geom_bar(aes(x = cut, fill = clarity), position = "dodge")
```


## Lines plot

Effect of vitamin C on tooth growth in guinea pigs vs dose, separately for two delivery methods (orange juice, ascorbic acid)

```{r}
df= data.frame(supp=rep(c("VC", "OJ"), each=3),
                dose=rep(c("D0.5", "D1", "D2"),2),
                len=c(6.8, 15, 33, 4.2, 10, 29.5))
df
```

```{r}
#| output-location: slide
ggplot(data=df, aes(x=dose, y=len, group=supp, color=supp)) +
  geom_line()+
  geom_point()
```

